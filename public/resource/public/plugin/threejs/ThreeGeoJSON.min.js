/*
 * Compressed by JSA(www.xidea.org)
 */
function objCopy(){var E=arguments[0]||{},B,_=1,$=arguments.length;function A($,A){var _=Object.prototype.toString;return(A==="Null"&&$===null)||(A==="Undefined"&&$===undefined)||_.call($).slice(8,-1)===A}for(;_<$;_++)if((B=arguments[_])!=null)for(var D in B){var C=B[D];if(B===C)continue;if(A(C,"Object"))E[D]=arguments.callee(E[D]||{},C);else if(A(C,"Array"))E[D]=arguments.callee(E[D]||[],C);else E[D]=C}B=null;return E}function THREEGeoJSON($){if($)objCopy(this.settings,$)}THREEGeoJSON.prototype={settings:{drawLine:function($){},drawPolygon:function($){},renderLine:function(){},renderPolygon:function(){}},_lines:[],_polygon:{},convertCoordinates:undefined,buildCoordinates:undefined,drawFun:undefined,drawThreeGeo:function(E,F,A,D){var _=this._createGeometryArray(E);this.convertCoordinates=this._getConversionFunctionName(A);this.buildCoordinates=this._getBuildCoordinatesFunctionName(A);this.drawFun=this._getDrawFunctionName(A);var C,$;for(var B=0;B<_.length;B++){C=_[B];this.drawFun(this.buildCoordinates(C,F),C,D)}},_createGeometryArray:function($){var A=[];for(var _ in $){$[_].properties={name:_,code:$[_].code};A.push($[_])}return A},_getConversionFunctionName:function($){var _;if($=="sphere")_=this._convertToSphereCoords;else if($=="plane")_=this._convertToPlaneCoords;else throw new Error("The shape that you specified is not valid.");return _},_getBuildCoordinatesFunctionName:function($){var _;if($=="sphere")_=this._buildToSphereCoords;else if($=="plane")_=this._buildToPlaneCoords;else throw new Error("The shape that you specified is not valid.");return _},_convertToSphereCoords:function($,_){return{x:Math.cos($[1]*Math.PI/180)*Math.cos($[0]*Math.PI/180)*_,y:Math.cos($[1]*Math.PI/180)*Math.sin($[0]*Math.PI/180)*_,z:Math.sin($[1]*Math.PI/180)*_}},_sphereVertices:[],_sphereuvs:[],_buildToSphereCoords:function(_,C){for(var A=0;A<_.vertices.length;A+=2){var B=_.vertices[A],D=_.vertices[A+1],$=this.convertCoordinates([B,D],C);this._sphereVertices.push(new THREE.Vector3($.x,$.y,$.z));this._sphereuvs.push(new THREE.Vector2((B/180)*C,(D/180)*C))}return{vertices:this._sphereVertices,uvs:this._sphereuvs,boundary:this._locationToLineVector(_,C)}},_convertToPlaneCoords:function($,_){return{x:($[0]/180)*_,y:($[1]/180)*_,z:undefined}},_lineboundary:[],_locationToLineVector:function(C,N){for(var G=0,K=C.polygons.length;G<K;G++){var Q=C.polygons[G],B=Q[0],O=B.length;for(var H=0,$=O;H<$;H++){var E=B[0];G===0?B.push(B[H]+O):(H===0?B[H]*=2:B[H]+=E/2,B.push(B[H]+O))}}for(G=0,K=C.polygons.length;G<K;G++){var Q=C.polygons[G],B=Q[0],M=[],D;for(var J=0;J<B.length;J+=2){var _=B[J],A=B[J+1],I=C.vertices[_],P=C.vertices[A],L=this.convertCoordinates([I,P],N),F=new THREE.Vector3(L.x,L.y,L.z);if(J===0)D=F.clone();M.push(F)}M.push(D);this._lineboundary.push(M)}return this._lineboundary},_buildToPlaneCoords:function($,_){return this._locationToLineVector($,_)},chinaLineMaterial:new THREE.LineBasicMaterial({color:13421772,transparent:true,opacity:1}),otherLineMaterial:new THREE.LineBasicMaterial({color:39423,transparent:true,opacity:1}),chinaPolygonMaterial:new THREE.MeshBasicMaterial({color:2437680,transparent:true,opacity:0.8}),otherPolygonMaterial:new THREE.MeshBasicMaterial({color:340528,transparent:true,opacity:0.5}),lineMesh:undefined,polygonMesh:undefined,_draw3DPolygon:function(E,C,J){var A=new THREE.Geometry();A.vertices=E.vertices;var H=E.vertices.length;for(D=0;D<H;D++){var I=E.vertices[D];E.vertices.push(I.clone())}for(D=0;D<C.triangles.length;D+=3){var $=C.triangles[D],_=C.triangles[D+1],B=C.triangles[D+2];A.faces.push(new THREE.Face3($,_,B,[E.vertices[$],E.vertices[_],E.vertices[B]]));A.faceVertexUvs[0].push([E.uvs[$],E.uvs[_],E.uvs[B]]);A.faces.push(new THREE.Face3(H+_,H+$,H+B,[E.vertices[_].clone(),E.vertices[$].clone(),E.vertices[B].clone()]));A.faceVertexUvs[0].push([E.uvs[_],E.uvs[$],E.uvs[B]])}A.computeFaceNormals();A.boundingSphere=new THREE.Sphere(new THREE.Vector3(),1);if(C.properties.code=="cn"){this.polygonMesh=this.settings.renderPolygon(C,A)||new THREE.Mesh(A,this.chinaPolygonMaterial.clone());for(var D=0,G=E.boundary.length;D<G;D++){var F=new THREE.Geometry();F.vertices=E.boundary[D];this.lineMesh=this.settings.renderLine(C,F)||new THREE.Line(F,this.chinaLineMaterial.clone());this.polygonMesh.userData=C.properties;this._lines.push(this.lineMesh);this.settings.drawLine(this.lineMesh)}}else{this.polygonMesh=this.settings.renderPolygon(C,A)||new THREE.Mesh(A,this.otherPolygonMaterial.clone());for(D=0,G=E.boundary.length;D<G;D++){F=new THREE.Geometry();F.vertices=E.boundary[D];this.lineMesh=this.settings.renderLine()||new THREE.Line(F,this.otherLineMaterial.clone());this.polygonMesh.userData=C.properties;this._lines.push(this.lineMesh);this.settings.drawLine(this.lineMesh)}}if(!this._polygon[C.properties.name])this._polygon[C.properties.name]=[];this._polygon[C.properties.name].push(this.polygonMesh);this.settings.drawPolygon(this.polygonMesh);E=null;this._clearTemp()},_draw2DPolygon:function($,A,B){var _,G;for(var C=0,F=$.length;C<F;C++){var E=new THREE.Geometry();E.vertices=$[C];_=new THREE.Shape();_.moveTo(E.vertices[0].x,E.vertices[0].y);for(var D=1;D<E.vertices.length;D++)_.lineTo(E.vertices[D].x,E.vertices[D].y);G=new THREE.ShapeGeometry(_);G.faces.push(new THREE.Face3(0,0,0));G.faceVertexUvs[0].push([0,0,0]);if(A.properties.code=="cn"){this.polygonMesh=this.settings.renderPolygon(A,G)||new THREE.Mesh(G,this.chinaPolygonMaterial.clone());this.lineMesh=new THREE.Line(E,this.chinaLineMaterial.clone())}else{this.polygonMesh=this.settings.renderPolygon(A,G)||new THREE.Mesh(G,this.otherPolygonMaterial.clone());this.lineMesh=new THREE.Line(E,this.otherLineMaterial.clone())}this.polygonMesh.userData=A.properties;this._lines.push(this.lineMesh);if(!this._polygon[A.properties.name])this._polygon[A.properties.name]=[];this._polygon[A.properties.name].push(this.polygonMesh);this.settings.drawLine(this.lineMesh);this.settings.drawPolygon(this.polygonMesh)}$=null;this._clearTemp()},_getDrawFunctionName:function($){var _;if($=="sphere")_=this._draw3DPolygon;else if($=="plane")_=this._draw2DPolygon;else throw new Error("The shape that you specified is not valid.");return _},_clearTemp:function(){this._lineboundary=[],this._sphereVertices=[],this._sphereuvs=[]}}